name: SvxLink CI ARM64

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test ARM64
    runs-on: ubuntu-latest # Ubuntu 24.04 (noble) as of July 2025

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Enable multi-arch support and configure apt sources
        run: |
          sudo dpkg --add-architecture arm64
          # Backup original sources.list
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          # Clear existing sources to avoid conflicts
          sudo rm -rf /etc/apt/sources.list.d/*
          # Create new sources.list for Ubuntu 24.04 (noble) using ports.ubuntu.com for ARM64
          cat << EOF | sudo tee /etc/apt/sources.list
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu noble-security main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
          EOF
          # Verify sources.list
          cat /etc/apt/sources.list
          # Update apt with new sources
          sudo apt-get update -o Acquire::http::No-Cache=True

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            cmake \
            make \
            libsigc++-2.0-dev \
            libsigc++-2.0-dev:arm64 \
            libgsm1-dev \
            libgsm1-dev:arm64 \
            libpopt-dev \
            libpopt-dev:arm64 \
            tcl-dev \
            tcl-dev:arm64 \
            libgcrypt20-dev \
            libgcrypt20-dev:arm64 \
            libspeex-dev \
            libspeex-dev:arm64 \
            libasound2-dev \
            libasound2-dev:arm64 \
            libopus-dev \
            libopus-dev:arm64 \
            qtbase5-dev \
            qtbase5-dev:arm64 \
            qtmultimedia5-dev \
            qtmultimedia5-dev:arm64 \
            qttools5-dev \
            qttools5-dev:arm64 \
            libvorbis-dev \
            libvorbis-dev:arm64 \
            libcurl4-openssl-dev \
            libcurl4-openssl-dev:arm64 \
            libssl-dev \
            libssl-dev:arm64 \
            libjsoncpp-dev \
            libjsoncpp-dev:arm64 \
            librtlsdr-dev \
            librtlsdr-dev:arm64 \
            libgpiod-dev \
            libgpiod-dev:arm64 \
            qemu-user-static \
            binfmt-support \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Debug libsigc++ installation
        run: |
          echo "Checking libsigc++-2.0-dev installation..."
          dpkg -l | grep libsigc++-2.0-dev
          echo "Listing ARM64 libsigc++ files..."
          find /usr/lib/aarch64-linux-gnu -name "libsigc++-2.0*"
          find /usr/include -name "sigc++-2.0"
          find /usr/lib/aarch64-linux-gnu -name "sigc++-2.0"
          echo "Checking pkg-config for libsigc++-2.0..."
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig pkg-config --modversion sigc++-2.0 || echo "pkg-config failed"
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig pkg-config --libs --cflags sigc++-2.0 || echo "pkg-config failed"

      - name: Create ARM64 toolchain file
        run: |
          cat << EOF > /tmp/arm64-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          # Explicitly set paths for libsigc++-2.0
          set(SIGC2_LIBRARY /usr/lib/aarch64-linux-gnu/libsigc++-2.0.so)
          set(SIGC2_INCLUDE_DIR /usr/include/sigc++-2.0;/usr/lib/aarch64-linux-gnu/sigc++-2.0/include)
          EOF

      - name: Configure for ARM64
        run: |
          mkdir -p src/build
          cd src/build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=/tmp/arm64-toolchain.cmake \
            -DSIGC2_LIBRARY=/usr/lib/aarch64-linux-gnu/libsigc++-2.0.so \
            -DSIGC2_INCLUDE_DIR=/usr/include/sigc++-2.0:/usr/lib/aarch64-linux-gnu/sigc++-2.0/include \
            -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build for ARM64
        run: |
          cd src/build
          make -j$(nproc)

      - name: Run tests
        continue-on-error: true # Tests may be optional if not fully implemented
        run: |
          cd src/build
          qemu-aarch64 ./src/svxlink/svxlink --version # Basic test to run the binary

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: svxlink-binaries-arm64
          path: src/build/src/
